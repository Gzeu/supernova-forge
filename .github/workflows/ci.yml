name: 🚀 SupernovaForge CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Type Check
      run: npm run type-check
      
    - name: 🎨 Check Code Formatting
      run: npm run format:check
      
    - name: 🐛 Run ESLint
      run: npm run lint
      
    - name: 🧪 Run Unit Tests
      run: npm run test -- --coverage
      
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  build:
    name: 🛠️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🛠️ Build Application
      run: npm run build
      env:
        NEXT_PUBLIC_MULTIVERSX_NETWORK: devnet
        NEXT_PUBLIC_MULTIVERSX_CHAIN_ID: D
        
    - name: 📎 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .next/
        
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🌐 Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
  smart-contracts:
    name: 📜 Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: 📜 Check Smart Contracts Format
      run: |
        if [ -d "contracts" ]; then
          cd contracts
          cargo fmt -- --check
        fi
        
    - name: 🐛 Run Clippy
      run: |
        if [ -d "contracts" ]; then
          cd contracts
          cargo clippy -- -D warnings
        fi
        
    - name: 🧪 Test Smart Contracts
      run: |
        if [ -d "contracts" ] && [ -f "contracts/Cargo.toml" ]; then
          cd contracts
          cargo test
        fi